{"version":3,"sources":["constants.js","contexts/ToDoContext.js","components/AppHeader.js","components/AppBody.js","components/AppToDo.js","App.js","reportWebVitals.js","index.js"],"names":["TO_DO_DONE","TO_DO_PROCESSING","LABEL_TO_DO_LIST_STORAGE","TodoContext","createContext","toDoList","setToDoList","addToDo","removeToDoItem","onChangeToDoStatus","ToDoContextProvider","children","useState","useEffect","localStorage","setItem","JSON","stringify","todoContextData","toDoLabel","prev","now","Date","id","valueOf","label","status","createdAt","concat","filter","toDoItem","index","map","Provider","value","AppHeader","props","useContext","todoList","toDo","setToDo","addToDoNew","className","onChange","event","target","type","placeholder","onKeyDown","key","onClick","AppBody","AppToDo","initial","setInitial","dataToDoList","getItem","dataInitial","parse","Array","isArray","App","ToDoContext","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a0477626.chunk.js","sourcesContent":["export const TO_DO_DONE = 'TO_DO_DONE';\nexport const TO_DO_PROCESSING = 'TO_DO_PROCESSING';\nexport const LABEL_TO_DO_LIST_STORAGE = 'dataToDoListReactContext';","import {createContext, useEffect, useState} from \"react\";\nimport {LABEL_TO_DO_LIST_STORAGE, TO_DO_DONE, TO_DO_PROCESSING} from \"../constants\";\n\nexport const TodoContext = createContext({\n    toDoList: [],\n    setToDoList: () => {},\n    addToDo: () => {},\n    removeToDoItem: () => {},\n    onChangeToDoStatus: () => {}\n});\n\nconst ToDoContextProvider = ({children}) => {\n    const [toDoList, setToDoList] = useState([]);\n    useEffect(() => {\n        localStorage.setItem(LABEL_TO_DO_LIST_STORAGE, JSON.stringify(toDoList))\n    }, [toDoList])\n    const addToDo = (toDoLabel) => {\n        if (toDoLabel !== '') {\n            setToDoList(prev => {\n                const now = new Date();\n                return [{\n                    id: now.valueOf(),\n                    label: toDoLabel,\n                    status: TO_DO_PROCESSING,\n                    createdAt: now,\n                }].concat(prev)\n            })\n        }\n    }\n    const removeToDoItem = (id) => {\n        setToDoList(prev => {\n            return prev.filter((toDoItem, index) => {\n                return toDoItem.id !== id;\n            })\n        })\n    }\n    const onChangeToDoStatus = (id) => {\n        setToDoList(prev => {\n            return prev.map((toDoItem, index) => {\n                if (toDoItem.id === id) {\n                    return {\n                        ...toDoItem,\n                        status: toDoItem.status === TO_DO_DONE ? TO_DO_PROCESSING : TO_DO_DONE\n                    }\n                } else {\n                    return toDoItem;\n                }\n            })\n        })\n    }\n    const todoContextData = {\n        toDoList,\n        setToDoList,\n        addToDo,\n        removeToDoItem,\n        onChangeToDoStatus,\n    };\n\n    return <TodoContext.Provider value={todoContextData}>\n        {children}\n    </TodoContext.Provider>\n}\n\nexport default ToDoContextProvider;","import {useContext, useState} from \"react\";\nimport {TodoContext} from \"../contexts/ToDoContext\";\n\nconst AppHeader = (props) => {\n    const {\n        todoList,\n        addToDo\n    } = useContext(TodoContext);\n    const [toDo, setToDo] = useState('');\n    const handleChange = (event) => {\n        setToDo(event.target.value)\n    }\n    const addToDoNew = () => {\n        if (toDo !== '') {\n            addToDo(toDo);\n            setToDo('');\n        }\n    }\n    const handleKeyDown = (event) => {\n        if (event.key === 'Enter') {\n            addToDoNew();\n        }\n    }\n    return (\n        <div>\n            <div className=\"header\">\n                <h2>To Do List - React Context</h2>\n                <div className=\"input\">\n                    <input\n                        onChange={handleChange}\n                        type=\"text\"\n                        value={toDo}\n                        placeholder=\"Title...\"\n                        onKeyDown={handleKeyDown}\n                    />\n                    <span className=\"addBtn\" onClick={() => addToDoNew()}>Add</span>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default AppHeader;","import {TO_DO_DONE, TO_DO_PROCESSING} from \"../constants\";\nimport {useContext} from \"react\";\nimport {TodoContext} from \"../contexts/ToDoContext\";\n\nconst AppBody = (props) => {\n    const {\n        toDoList,\n        removeToDoItem,\n        onChangeToDoStatus\n    } = useContext(TodoContext);\n\n    return (\n        <div className=\"body\">\n            <ul>\n                {\n                    toDoList.map((toDoItem, index) => {\n                        return (\n                            <li key={index} onClick={() => onChangeToDoStatus(toDoItem.id)} className={toDoItem.status === TO_DO_DONE ? \"checked\" : \"\"}>\n                                <span className=\"checkedIcon\"></span>\n                                <span className=\"label\" >\n                          {toDoItem.label}\n                      </span>\n                                <span onClick={() => removeToDoItem(toDoItem.id)} className=\"close\">\n                        Ã—\n                      </span>\n                            </li>\n                        )\n                    })\n                }\n            </ul>\n        </div>\n    );\n}\n\nexport default AppBody;","import AppHeader from \"./AppHeader\";\nimport AppBody from \"./AppBody\";\nimport {useContext, useEffect, useState} from \"react\";\nimport {LABEL_TO_DO_LIST_STORAGE} from \"../constants\";\nimport {TodoContext} from \"../contexts/ToDoContext\";\n\nconst AppToDo = (props) => {\n    const {\n        setToDoList,\n    } = useContext(TodoContext);\n    const [initial, setInitial] = useState(false);\n    useEffect(() => {\n        const dataToDoList = localStorage.getItem(LABEL_TO_DO_LIST_STORAGE);\n        const dataInitial = JSON.parse(dataToDoList);\n        setToDoList(Array.isArray(dataInitial) ? dataInitial : []);\n        setInitial(true);\n    }, [])\n    return (\n        <>\n            <AppHeader />\n            {initial && <AppBody />}\n        </>\n    )\n}\n\nexport default AppToDo;","import './App.css';\nimport ToDoContextProvider from \"./contexts/ToDoContext\";\nimport AppToDo from \"./components/AppToDo\";\n\nconst App = () => {\n    return (\n        <div className=\"app\">\n            <ToDoContextProvider>\n               <AppToDo />\n            </ToDoContextProvider>\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}